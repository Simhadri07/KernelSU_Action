name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "${{ env.compiler }} -dumpmachine; ${{ env.compiler }} -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
    - uses: actions/checkout@v4

    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" config.env | head -n 1 | cut -d "=" -f 2)
        CONFIG_LIST=(
            KERNEL_SOURCE
            KERNEL_SOURCE_BRANCH
            KERNEL_CONFIG
            KERNEL_IMAGE_NAME
            ARCH
            ADD_LOCALVERSION_TO_FILENAME
            EXTRA_CMDS
            USE_CUSTOM_CLANG
            CUSTOM_CLANG_SOURCE
            CUSTOM_CLANG_BRANCH
            CUSTOM_CMDS
            CLANG_BRANCH
            CLANG_VERSION
            ENABLE_GCC_ARM64
            ENABLE_GCC_ARM32
            USE_CUSTOM_GCC_64
            CUSTOM_GCC_64_SOURCE
            CUSTOM_GCC_64_BRANCH
            CUSTOM_GCC_64_BIN
            USE_CUSTOM_GCC_32
            CUSTOM_GCC_32_SOURCE
            CUSTOM_GCC_32_BRANCH
            CUSTOM_GCC_32_BIN
            ENABLE_KERNELSU
            KERNELSU_TAG
            ADD_KPROBES_CONFIG
            DISABLE_LTO
            ADD_OVERLAYFS_CONFIG
            DISABLE_CC_WERROR
            APPLY_KSU_PATCH
            USE_CUSTOM_ANYKERNEL3
            CUSTOM_ANYKERNEL3_SOURCE
            CUSTOM_ANYKERNEL3_BRANCH
            ENABLE_CCACHE
            NEED_DTBO
            BUILD_BOOT_IMG
            SOURCE_BOOT_IMAGE
            KSU_EXPECTED_SIZE
            KSU_EXPECTED_HASH
            REMOVE_UNUSED_PACKAGES
        )
        for CONFIG in "${CONFIG_LIST[@]}"; do
            if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            else
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            fi
        done

    - name: Remove unused packages
      if: env.REMOVE_UNUSED_PACKAGES == 'true'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: false
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: false

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install -y git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download Clang-aosp
      if: env.USE_CUSTOM_CLANG != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
        tar -C clang-aosp/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz

    - name: Download Custom-Clang
      if: env.USE_CUSTOM_CLANG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_CLANG_SOURCE }} =~ git ]]; then
            if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
                wget -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                mkdir clang-aosp
                tar -C clang-aosp/ -zxvf clang.tar.gz
            else
                git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang-aosp --depth=1
            fi
        else
            wget -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
            mkdir clang-aosp
            unzip clang.zip -d clang-aosp/
        fi

    - name: Download Gcc-aosp
      if: env.USE_CUSTOM_GCC_64 != 'true' || env.USE_CUSTOM_GCC_32 != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ "${{ env.ENABLE_GCC_ARM64 }}" = 'true' ]; then
            mkdir gcc-64
            wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
        fi
        if [ "${{ env.ENABLE_GCC_ARM32 }}" = 'true' ]; then
            mkdir gcc-32
            wget -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-32/ -zxvf gcc-arm.tar.gz
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV
        fi

    - name: Download Custom-Gcc
      if: env.USE_CUSTOM_GCC_64 == 'true' || env.USE_CUSTOM_GCC_32 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ "${{ env.USE_CUSTOM_GCC_64 }}" = 'true' ]; then
          if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-64.tar.gz ${{ env.CUSTOM_GCC_64_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -zxvf gcc-64.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} gcc-64 --depth=1
              fi
          else
              wget -O gcc-64.zip ${{ env.CUSTOM_GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
          fi
          echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/${{ env.CUSTOM_GCC_64_BIN }}" >> $GITHUB_ENV
        fi
        if [ "${{ env.USE_CUSTOM_GCC_32 }}" = 'true' ]; then
          if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-32.tar.gz ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                tar -C gcc-32/ -zxvf gcc-32.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} gcc-32 --depth=1
              fi
          else
              wget -O gcc-32.zip ${{ env.CUSTOM_GCC_32_SOURCE }}
              mkdir gcc-32
              unzip gcc-32.zip -d gcc-32/
          fi
          echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/${{ env.CUSTOM_GCC_32_BIN }}" >> $GITHUB_ENV
        fi

    - name: Download Kernel Source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.KERNEL_SOURCE }} =~ git ]]; then
          git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel --depth=1
        else
          wget -O kernel.tar.gz ${{ env.KERNEL_SOURCE }}
          mkdir kernel
          tar -C kernel/ -zxvf kernel.tar.gz
        fi

    - name: Download AnyKernel3
      if: env.USE_CUSTOM_ANYKERNEL3 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} =~ git ]]; then
            git clone ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} -b ${{ env.CUSTOM_ANYKERNEL3_BRANCH }} anykernel3 --depth=1
        else
            wget -O anykernel3.zip ${{ env.CUSTOM_ANYKERNEL3_SOURCE }}
            mkdir anykernel3
            unzip anykernel3.zip -d anykernel3/
        fi

    - name: Build Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/kernel
        cp ${{ env.KERNEL_CONFIG }} .config
        if [ "${{ env.DISABLE_LTO }}" = 'true' ]; then
            echo "LTO disabled"
        else
            export KBUILD_CFLAGS+=" -flto"
        fi
        if [ "${{ env.DISABLE_CC_WERROR }}" = 'true' ]; then
            export KBUILD_CFLAGS+=" -Wno-error"
        fi
        if [ "${{ env.BUILD_BOOT_IMG }}" = 'true' ]; then
            # Build boot image logic here
            echo "Building boot image"
        fi
        make -j$(nproc) ARCH=${{ env.ARCH }} CROSS_COMPILE=${{ env.GCC_64 }} defconfig
        make -j$(nproc) ARCH=${{ env.ARCH }} CROSS_COMPILE=${{ env.GCC_64 }} IMAGE_NAME=${{ env.KERNEL_IMAGE_NAME }}
        if [ -d "output" ]; then
            mv output/*.img $GITHUB_WORKSPACE/
        fi
        echo "Kernel build completed"

    - name: Check for results
      run: |
        if [ -f "$GITHUB_WORKSPACE/${{ env.KERNEL_IMAGE_NAME }}" ]; then
            echo "Kernel build succeeded!"
        else
            echo "Kernel build failed."
            exit 1
        fi
